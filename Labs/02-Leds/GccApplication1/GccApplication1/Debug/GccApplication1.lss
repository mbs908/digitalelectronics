
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ec  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f2  00000000  00000000  0000105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d8  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 */
int main(void)
{   //ACTIVE HIGH ALL
    /* 1 */
    // Set pin as output in Data Direction Register...
    DDRC = DDRC | (1<<LED_1);
  80:	3d 9a       	sbi	0x07, 5	; 7
    // ...and turn LED OFF in Data Register
    PORTC = PORTC & ~(1<<LED_1);
  82:	45 98       	cbi	0x08, 5	; 8

    /* second LED */
	// Set pin as output in Data Direction Register...
	DDRC = DDRC | (1<<LED_2);
  84:	3c 9a       	sbi	0x07, 4	; 7
	// ...and turn LED OFF in Data Register
	PORTC = PORTC & ~(1<<LED_2);
  86:	44 98       	cbi	0x08, 4	; 8
	
	/* 3 LED */
	// Set pin as output in Data Direction Register...
	DDRC = DDRC | (1<<LED_3);
  88:	3b 9a       	sbi	0x07, 3	; 7
	// ...and turn LED OFF in Data Register
	PORTC = PORTC & ~(1<<LED_3);
  8a:	43 98       	cbi	0x08, 3	; 8
	
	/* 4 LED */
	// Set pin as output in Data Direction Register...
	DDRC = DDRC | (1<<LED_4);
  8c:	3a 9a       	sbi	0x07, 2	; 7
	// ...and turn LED ON in Data Register
	PORTC = PORTC & ~(1<<LED_4);
  8e:	42 98       	cbi	0x08, 2	; 8
	
	/* 5 LED */
	// Set pin as output in Data Direction Register...
	DDRC = DDRC | (1<<LED_5);
  90:	39 9a       	sbi	0x07, 1	; 7
	// ...and turn LED ON in Data Register
	PORTC = PORTC & ~(1<<LED_5);
  92:	41 98       	cbi	0x08, 1	; 8
	
	
	
	
	// PUSH BOTTON To set internal pull-up resistor 
	DDRD = DDRD & (0<<BTN);
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	1a b8       	out	0x0a, r1	; 10
	PORTD = PORTD | (1<<BTN);
  98:	5c 9a       	sbi	0x0b, 4	; 11
    {
		
		loop_until_bit_is_clear(PIND, 4);
		{
		 // Pause several milliseconds
		    PORTC=32;
  9a:	90 e2       	ldi	r25, 0x20	; 32

    // Infinite loop
    while (1)
    {
		
		loop_until_bit_is_clear(PIND, 4);
  9c:	4c 99       	sbic	0x09, 4	; 9
  9e:	fe cf       	rjmp	.-4      	; 0x9c <main+0x1c>
		{
		 // Pause several milliseconds
		    PORTC=32;
  a0:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	34 e3       	ldi	r19, 0x34	; 52
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	30 40       	sbci	r19, 0x00	; 0
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x28>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x32>
  b2:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC=(PORTC>>1);
  b4:	88 b1       	in	r24, 0x08	; 8
  b6:	86 95       	lsr	r24
  b8:	88 b9       	out	0x08, r24	; 8
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	34 e3       	ldi	r19, 0x34	; 52
  be:	8c e0       	ldi	r24, 0x0C	; 12
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x40>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4a>
  ca:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC=(PORTC>>1);
  cc:	88 b1       	in	r24, 0x08	; 8
  ce:	86 95       	lsr	r24
  d0:	88 b9       	out	0x08, r24	; 8
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	34 e3       	ldi	r19, 0x34	; 52
  d6:	8c e0       	ldi	r24, 0x0C	; 12
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x58>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x62>
  e2:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC=(PORTC>>1);
  e4:	88 b1       	in	r24, 0x08	; 8
  e6:	86 95       	lsr	r24
  e8:	88 b9       	out	0x08, r24	; 8
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	34 e3       	ldi	r19, 0x34	; 52
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x70>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x7a>
  fa:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC=(PORTC>>1);
  fc:	88 b1       	in	r24, 0x08	; 8
  fe:	86 95       	lsr	r24
 100:	88 b9       	out	0x08, r24	; 8
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	34 e3       	ldi	r19, 0x34	; 52
 106:	8c e0       	ldi	r24, 0x0C	; 12
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	30 40       	sbci	r19, 0x00	; 0
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x88>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x92>
 112:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC=(PORTC>>1);
 114:	88 b1       	in	r24, 0x08	; 8
 116:	86 95       	lsr	r24
 118:	88 b9       	out	0x08, r24	; 8
			
		}
		
		
       
    }
 11a:	c0 cf       	rjmp	.-128    	; 0x9c <main+0x1c>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
