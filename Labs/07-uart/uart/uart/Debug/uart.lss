
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  000005ee  00000682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800158  00800158  000006da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016d6  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aea  00000000  00000000  00001f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000afa  00000000  00000000  00002a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00003510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ca  00000000  00000000  000037cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bb2  00000000  00000000  00003d96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004948  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 2b 02 	jmp	0x456	; 0x456 <__vector_18>
  4c:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 35       	cpi	r26, 0x58	; 88
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e5       	ldi	r26, 0x58	; 88
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 39       	cpi	r26, 0x9E	; 158
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
  9e:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	00 00       	nop
  aa:	29 98       	cbi	0x05, 1	; 5
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	54 9a       	sbi	0x0a, 4	; 10
  be:	55 9a       	sbi	0x0a, 5	; 10
  c0:	56 9a       	sbi	0x0a, 6	; 10
  c2:	57 9a       	sbi	0x0a, 7	; 10
  c4:	5f 98       	cbi	0x0b, 7	; 11
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 98       	cbi	0x0b, 5	; 11
  ca:	5c 98       	cbi	0x0b, 4	; 11
  cc:	cc 23       	and	r28, r28
  ce:	0c f4       	brge	.+2      	; 0xd2 <lcd_write+0x24>
  d0:	5f 9a       	sbi	0x0b, 7	; 11
  d2:	c6 fd       	sbrc	r28, 6
  d4:	5e 9a       	sbi	0x0b, 6	; 11
  d6:	c5 fd       	sbrc	r28, 5
  d8:	5d 9a       	sbi	0x0b, 5	; 11
  da:	c4 fd       	sbrc	r28, 4
  dc:	5c 9a       	sbi	0x0b, 4	; 11
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e2:	5f 98       	cbi	0x0b, 7	; 11
  e4:	5e 98       	cbi	0x0b, 6	; 11
  e6:	5d 98       	cbi	0x0b, 5	; 11
  e8:	5c 98       	cbi	0x0b, 4	; 11
  ea:	c3 fd       	sbrc	r28, 3
  ec:	5f 9a       	sbi	0x0b, 7	; 11
  ee:	c2 fd       	sbrc	r28, 2
  f0:	5e 9a       	sbi	0x0b, 6	; 11
  f2:	c1 fd       	sbrc	r28, 1
  f4:	5d 9a       	sbi	0x0b, 5	; 11
  f6:	c0 fd       	sbrc	r28, 0
  f8:	5c 9a       	sbi	0x0b, 4	; 11
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	5d 9a       	sbi	0x0b, 5	; 11
 102:	5e 9a       	sbi	0x0b, 6	; 11
 104:	5f 9a       	sbi	0x0b, 7	; 11
 106:	8a ef       	ldi	r24, 0xFA	; 250
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_write+0x5a>
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_command>:
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 116:	08 95       	ret

00000118 <lcd_gotoxy>:
 118:	61 11       	cpse	r22, r1
 11a:	04 c0       	rjmp	.+8      	; 0x124 <lcd_gotoxy+0xc>
 11c:	80 58       	subi	r24, 0x80	; 128
 11e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 122:	08 95       	ret
 124:	80 54       	subi	r24, 0x40	; 64
 126:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 12a:	08 95       	ret

0000012c <lcd_clrscr>:
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 132:	08 95       	ret

00000134 <lcd_putc>:
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 13a:	08 95       	ret

0000013c <lcd_puts>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	fc 01       	movw	r30, r24
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	29 f0       	breq	.+10     	; 0x156 <lcd_puts+0x1a>
 14c:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_putc>
 150:	89 91       	ld	r24, Y+
 152:	81 11       	cpse	r24, r1
 154:	fb cf       	rjmp	.-10     	; 0x14c <lcd_puts+0x10>
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 160:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 162:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 164:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 166:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 168:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 16a:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 16c:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_init+0x16>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_init+0x1c>
 178:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 17a:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 17c:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 182:	81 ee       	ldi	r24, 0xE1	; 225
 184:	94 e0       	ldi	r25, 0x04	; 4
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x2a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x30>
 18c:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 192:	95 e1       	ldi	r25, 0x15	; 21
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_init+0x38>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	85 e1       	ldi	r24, 0x15	; 21
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x44>
 1a4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1a6:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ac:	95 e1       	ldi	r25, 0x15	; 21
 1ae:	9a 95       	dec	r25
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x52>
 1b2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1b4:	88 e2       	ldi	r24, 0x28	; 40
 1b6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1c0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ca:	8c 2f       	mov	r24, r28
 1cc:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
}/* lcd_init */
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <parity_calculator>:
 * Main function where the program execution begins. Use Timer/Counter1
 * and start ADC conversion four times per second. Send value to LCD
 * and UART.
 */
uint8_t parity_calculator(uint16_t value)
{
 1d4:	9c 01       	movw	r18, r24
 1d6:	9f e0       	ldi	r25, 0x0F	; 15
	uint8_t j=0;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t parity=0; //ODD PARITY
	uint8_t i=0;
	
	for(i=0;i<15;i++)
	{
		if((value % 2)==1)
 1da:	20 fd       	sbrc	r18, 0
		{
			j++;
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
		}
		value=value>>1;
 1de:	36 95       	lsr	r19
 1e0:	27 95       	ror	r18
 1e2:	91 50       	subi	r25, 0x01	; 1
{
	uint8_t j=0;
	uint8_t parity=0; //ODD PARITY
	uint8_t i=0;
	
	for(i=0;i<15;i++)
 1e4:	d1 f7       	brne	.-12     	; 0x1da <parity_calculator+0x6>
	}
	else
	{
		parity=1;
	}
	return parity;
 1e6:	80 95       	com	r24
}
 1e8:	81 70       	andi	r24, 0x01	; 1
 1ea:	08 95       	ret

000001ec <main>:

int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(3, 1); lcd_puts("parity:");
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(8, 0); lcd_puts("a");    // Put ADC value in decimal
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	88 e0       	ldi	r24, 0x08	; 8
 216:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 21a:	8f e0       	ldi	r24, 0x0F	; 15
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	8d e0       	ldi	r24, 0x0D	; 13
 226:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 22a:	81 e1       	ldi	r24, 0x11	; 17
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(8, 1); lcd_puts("c");    // Put button name here
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	88 e0       	ldi	r24, 0x08	; 8
 236:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 23a:	83 e1       	ldi	r24, 0x13	; 19
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
	ADMUX=ADMUX|(1<<REFS0);
 242:	ec e7       	ldi	r30, 0x7C	; 124
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	80 83       	st	Z, r24
    // Set input channel to ADC0
    ADMUX&=~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0));
 24c:	80 81       	ld	r24, Z
 24e:	80 7f       	andi	r24, 0xF0	; 240
 250:	80 83       	st	Z, r24
    // Enable ADC module
    ADCSRA|=(1<<ADEN);
 252:	ea e7       	ldi	r30, 0x7A	; 122
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	80 83       	st	Z, r24
    // Enable conversion complete interrupt
    ADCSRA|=(1<<ADIE);
 25c:	80 81       	ld	r24, Z
 25e:	88 60       	ori	r24, 0x08	; 8
 260:	80 83       	st	Z, r24
    // Set clock prescaler to 128

    ADCSRA|=((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));
 262:	80 81       	ld	r24, Z
 264:	87 60       	ori	r24, 0x07	; 7
 266:	80 83       	st	Z, r24
    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Enable interrupt and set the overflow prescaler to 262 ms
	TIM1_overflow_interrupt_enable()
 268:	ef e6       	ldi	r30, 0x6F	; 111
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	80 83       	st	Z, r24
	TIM1_overflow_262ms()
 272:	e1 e8       	ldi	r30, 0x81	; 129
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	8b 7f       	andi	r24, 0xFB	; 251
 27a:	80 83       	st	Z, r24
 27c:	80 81       	ld	r24, Z
 27e:	83 60       	ori	r24, 0x03	; 3
 280:	80 83       	st	Z, r24


    // Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 282:	87 e6       	ldi	r24, 0x67	; 103
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 83 02 	call	0x506	; 0x506 <uart_init>


    // Enables interrupts by setting the global interrupt mask
    sei();
 28a:	78 94       	sei
 28c:	ff cf       	rjmp	.-2      	; 0x28c <main+0xa0>

0000028e <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	8f 93       	push	r24
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
	static uint8_t i=0;
	if(i==3)
 29e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	41 f4       	brne	.+16     	; 0x2b6 <__vector_13+0x28>
	{
		i=0;
 2a6:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <__data_end>
		ADCSRA=ADCSRA|(1<<ADSC);
 2aa:	ea e7       	ldi	r30, 0x7A	; 122
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	80 64       	ori	r24, 0x40	; 64
 2b2:	80 83       	st	Z, r24
 2b4:	03 c0       	rjmp	.+6      	; 0x2bc <__vector_13+0x2e>
	}
	
	else
	{
		i++;
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
 2b8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <__data_end>
	}

}
 2bc:	ff 91       	pop	r31
 2be:	ef 91       	pop	r30
 2c0:	8f 91       	pop	r24
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <__vector_21>:
/**
 * ISR starts when ADC completes the conversion. Display value on LCD
 * and send it to UART.
 */
ISR(ADC_vect)
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <__vector_21+0x2c>
 2f8:	00 d0       	rcall	.+0      	; 0x2fa <__vector_21+0x2e>
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
    uint16_t value = 0;
    char lcd_string[4] = "0000";
 2fe:	80 e3       	ldi	r24, 0x30	; 48
 300:	90 e3       	ldi	r25, 0x30	; 48
 302:	9a 83       	std	Y+2, r25	; 0x02
 304:	89 83       	std	Y+1, r24	; 0x01
 306:	9c 83       	std	Y+4, r25	; 0x04
 308:	8b 83       	std	Y+3, r24	; 0x03

    value = ADC;    // Copy ADC result to 16-bit variable
 30a:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 30e:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 312:	4a e0       	ldi	r20, 0x0A	; 10
 314:	be 01       	movw	r22, r28
 316:	6f 5f       	subi	r22, 0xFF	; 255
 318:	7f 4f       	sbci	r23, 0xFF	; 255
 31a:	c8 01       	movw	r24, r16
 31c:	0e 94 c0 02 	call	0x580	; 0x580 <__itoa_ncheck>
    itoa(value, lcd_string, 10);    // Convert decimal value to string
	lcd_gotoxy(8,0);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	88 e0       	ldi	r24, 0x08	; 8
 324:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts("    ");
 328:	85 e1       	ldi	r24, 0x15	; 21
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	lcd_gotoxy(8,0);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	88 e0       	ldi	r24, 0x08	; 8
 334:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts(lcd_string);
 338:	ce 01       	movw	r24, r28
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	
	if(value<=80)
 340:	01 35       	cpi	r16, 0x51	; 81
 342:	11 05       	cpc	r17, r1
 344:	20 f4       	brcc	.+8      	; 0x34e <__vector_21+0x82>
	{
		uart_puts("right button");
 346:	8a e1       	ldi	r24, 0x1A	; 26
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 b1 02 	call	0x562	; 0x562 <uart_puts>
	}
	
	if((value>80) && (value<190 ))
 34e:	c8 01       	movw	r24, r16
 350:	81 55       	subi	r24, 0x51	; 81
 352:	91 09       	sbc	r25, r1
 354:	8d 36       	cpi	r24, 0x6D	; 109
 356:	91 05       	cpc	r25, r1
 358:	20 f4       	brcc	.+8      	; 0x362 <__vector_21+0x96>
	{
		uart_puts("up button");
 35a:	87 e2       	ldi	r24, 0x27	; 39
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 b1 02 	call	0x562	; 0x562 <uart_puts>
	}
	
	if((value>190) && (value<370 ))
 362:	c8 01       	movw	r24, r16
 364:	8f 5b       	subi	r24, 0xBF	; 191
 366:	91 09       	sbc	r25, r1
 368:	83 3b       	cpi	r24, 0xB3	; 179
 36a:	91 05       	cpc	r25, r1
 36c:	20 f4       	brcc	.+8      	; 0x376 <__vector_21+0xaa>
	{
		uart_puts("down button");
 36e:	81 e3       	ldi	r24, 0x31	; 49
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 b1 02 	call	0x562	; 0x562 <uart_puts>
	}
	
	if((value>370) && (value<570 ))
 376:	c8 01       	movw	r24, r16
 378:	83 57       	subi	r24, 0x73	; 115
 37a:	91 40       	sbci	r25, 0x01	; 1
 37c:	87 3c       	cpi	r24, 0xC7	; 199
 37e:	91 05       	cpc	r25, r1
 380:	20 f4       	brcc	.+8      	; 0x38a <__vector_21+0xbe>
	{
		uart_puts("left button");
 382:	8d e3       	ldi	r24, 0x3D	; 61
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	0e 94 b1 02 	call	0x562	; 0x562 <uart_puts>
	}
	if((value>570) && (value<700 ))
 38a:	c8 01       	movw	r24, r16
 38c:	8b 53       	subi	r24, 0x3B	; 59
 38e:	92 40       	sbci	r25, 0x02	; 2
 390:	81 38       	cpi	r24, 0x81	; 129
 392:	91 05       	cpc	r25, r1
 394:	20 f4       	brcc	.+8      	; 0x39e <__vector_21+0xd2>
	{
		uart_puts("left button");
 396:	8d e3       	ldi	r24, 0x3D	; 61
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	0e 94 b1 02 	call	0x562	; 0x562 <uart_puts>
	}
	if((value>700) && (value<1090 ))
 39e:	c8 01       	movw	r24, r16
 3a0:	8d 5b       	subi	r24, 0xBD	; 189
 3a2:	92 40       	sbci	r25, 0x02	; 2
 3a4:	85 38       	cpi	r24, 0x85	; 133
 3a6:	91 40       	sbci	r25, 0x01	; 1
 3a8:	20 f4       	brcc	.+8      	; 0x3b2 <__vector_21+0xe6>
	{
		uart_puts("none button");
 3aa:	89 e4       	ldi	r24, 0x49	; 73
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 b1 02 	call	0x562	; 0x562 <uart_puts>
	}
	
	
	
    uart_puts(lcd_string);
 3b2:	ce 01       	movw	r24, r28
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	0e 94 b1 02 	call	0x562	; 0x562 <uart_puts>
	uart_puts("\r\n");
 3ba:	85 e5       	ldi	r24, 0x55	; 85
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 b1 02 	call	0x562	; 0x562 <uart_puts>
 3c2:	40 e1       	ldi	r20, 0x10	; 16
 3c4:	be 01       	movw	r22, r28
 3c6:	6f 5f       	subi	r22, 0xFF	; 255
 3c8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ca:	c8 01       	movw	r24, r16
 3cc:	0e 94 c0 02 	call	0x580	; 0x580 <__itoa_ncheck>
	
	itoa(value, lcd_string, 16);    // Convert decimal value to string
	lcd_gotoxy(13,0);
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	8d e0       	ldi	r24, 0x0D	; 13
 3d4:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts("    ");
 3d8:	85 e1       	ldi	r24, 0x15	; 21
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	lcd_gotoxy(13,0);
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	8d e0       	ldi	r24, 0x0D	; 13
 3e4:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts(lcd_string);
 3e8:	ce 01       	movw	r24, r28
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>


    //PARITY
	itoa(parity_calculator(value), lcd_string, 10);
 3f0:	c8 01       	movw	r24, r16
 3f2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <parity_calculator>
 3f6:	4a e0       	ldi	r20, 0x0A	; 10
 3f8:	be 01       	movw	r22, r28
 3fa:	6f 5f       	subi	r22, 0xFF	; 255
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 c0 02 	call	0x580	; 0x580 <__itoa_ncheck>
	lcd_gotoxy(12,1);
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	8c e0       	ldi	r24, 0x0C	; 12
 408:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts("    ");
 40c:	85 e1       	ldi	r24, 0x15	; 21
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	lcd_gotoxy(12,1);
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	8c e0       	ldi	r24, 0x0C	; 12
 418:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts(lcd_string);
 41c:	ce 01       	movw	r24, r28
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	


}
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	ff 91       	pop	r31
 432:	ef 91       	pop	r30
 434:	bf 91       	pop	r27
 436:	af 91       	pop	r26
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	7f 91       	pop	r23
 43e:	6f 91       	pop	r22
 440:	5f 91       	pop	r21
 442:	4f 91       	pop	r20
 444:	3f 91       	pop	r19
 446:	2f 91       	pop	r18
 448:	1f 91       	pop	r17
 44a:	0f 91       	pop	r16
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 456:	1f 92       	push	r1
 458:	0f 92       	push	r0
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	0f 92       	push	r0
 45e:	11 24       	eor	r1, r1
 460:	2f 93       	push	r18
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
 466:	ef 93       	push	r30
 468:	ff 93       	push	r31
 46a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 46e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 472:	8c 71       	andi	r24, 0x1C	; 28
 474:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <UART_RxHead>
 478:	ef 5f       	subi	r30, 0xFF	; 255
 47a:	ef 71       	andi	r30, 0x1F	; 31
 47c:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <UART_RxTail>
 480:	e9 17       	cp	r30, r25
 482:	39 f0       	breq	.+14     	; 0x492 <__vector_18+0x3c>
 484:	e0 93 5b 01 	sts	0x015B, r30	; 0x80015b <UART_RxHead>
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	e2 5a       	subi	r30, 0xA2	; 162
 48c:	fe 4f       	sbci	r31, 0xFE	; 254
 48e:	20 83       	st	Z, r18
 490:	01 c0       	rjmp	.+2      	; 0x494 <__vector_18+0x3e>
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <UART_LastRxError>
 498:	89 2b       	or	r24, r25
 49a:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <UART_LastRxError>
 49e:	ff 91       	pop	r31
 4a0:	ef 91       	pop	r30
 4a2:	9f 91       	pop	r25
 4a4:	8f 91       	pop	r24
 4a6:	2f 91       	pop	r18
 4a8:	0f 90       	pop	r0
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	0f 90       	pop	r0
 4ae:	1f 90       	pop	r1
 4b0:	18 95       	reti

000004b2 <__vector_19>:
 4b2:	1f 92       	push	r1
 4b4:	0f 92       	push	r0
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	0f 92       	push	r0
 4ba:	11 24       	eor	r1, r1
 4bc:	8f 93       	push	r24
 4be:	9f 93       	push	r25
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
 4c4:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <UART_TxHead>
 4c8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <UART_TxTail>
 4cc:	98 17       	cp	r25, r24
 4ce:	69 f0       	breq	.+26     	; 0x4ea <__vector_19+0x38>
 4d0:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <UART_TxTail>
 4d4:	ef 5f       	subi	r30, 0xFF	; 255
 4d6:	ef 71       	andi	r30, 0x1F	; 31
 4d8:	e0 93 5c 01 	sts	0x015C, r30	; 0x80015c <UART_TxTail>
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	e2 58       	subi	r30, 0x82	; 130
 4e0:	fe 4f       	sbci	r31, 0xFE	; 254
 4e2:	80 81       	ld	r24, Z
 4e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <__vector_19+0x42>
 4ea:	e1 ec       	ldi	r30, 0xC1	; 193
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	8f 7d       	andi	r24, 0xDF	; 223
 4f2:	80 83       	st	Z, r24
 4f4:	ff 91       	pop	r31
 4f6:	ef 91       	pop	r30
 4f8:	9f 91       	pop	r25
 4fa:	8f 91       	pop	r24
 4fc:	0f 90       	pop	r0
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	0f 90       	pop	r0
 502:	1f 90       	pop	r1
 504:	18 95       	reti

00000506 <uart_init>:
 506:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <UART_TxHead>
 50a:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <UART_TxTail>
 50e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <UART_RxHead>
 512:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <UART_RxTail>
 516:	99 23       	and	r25, r25
 518:	1c f4       	brge	.+6      	; 0x520 <uart_init+0x1a>
 51a:	22 e0       	ldi	r18, 0x02	; 2
 51c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 520:	90 78       	andi	r25, 0x80	; 128
 522:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 526:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 52a:	88 e9       	ldi	r24, 0x98	; 152
 52c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 530:	86 e0       	ldi	r24, 0x06	; 6
 532:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 536:	08 95       	ret

00000538 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 538:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <UART_TxHead>
 53c:	2f 5f       	subi	r18, 0xFF	; 255
 53e:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 540:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <UART_TxTail>
 544:	29 17       	cp	r18, r25
 546:	e1 f3       	breq	.-8      	; 0x540 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 548:	e2 2f       	mov	r30, r18
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	e2 58       	subi	r30, 0x82	; 130
 54e:	fe 4f       	sbci	r31, 0xFE	; 254
 550:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 552:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 556:	e1 ec       	ldi	r30, 0xC1	; 193
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	80 62       	ori	r24, 0x20	; 32
 55e:	80 83       	st	Z, r24
 560:	08 95       	ret

00000562 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	ec 01       	movw	r28, r24
    while (*s)
 568:	88 81       	ld	r24, Y
 56a:	88 23       	and	r24, r24
 56c:	31 f0       	breq	.+12     	; 0x57a <uart_puts+0x18>
 56e:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 570:	0e 94 9c 02 	call	0x538	; 0x538 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 574:	89 91       	ld	r24, Y+
 576:	81 11       	cpse	r24, r1
 578:	fb cf       	rjmp	.-10     	; 0x570 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <__itoa_ncheck>:
 580:	bb 27       	eor	r27, r27
 582:	4a 30       	cpi	r20, 0x0A	; 10
 584:	31 f4       	brne	.+12     	; 0x592 <__itoa_ncheck+0x12>
 586:	99 23       	and	r25, r25
 588:	22 f4       	brpl	.+8      	; 0x592 <__itoa_ncheck+0x12>
 58a:	bd e2       	ldi	r27, 0x2D	; 45
 58c:	90 95       	com	r25
 58e:	81 95       	neg	r24
 590:	9f 4f       	sbci	r25, 0xFF	; 255
 592:	0c 94 cc 02 	jmp	0x598	; 0x598 <__utoa_common>

00000596 <__utoa_ncheck>:
 596:	bb 27       	eor	r27, r27

00000598 <__utoa_common>:
 598:	fb 01       	movw	r30, r22
 59a:	55 27       	eor	r21, r21
 59c:	aa 27       	eor	r26, r26
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	aa 1f       	adc	r26, r26
 5a4:	a4 17       	cp	r26, r20
 5a6:	10 f0       	brcs	.+4      	; 0x5ac <__utoa_common+0x14>
 5a8:	a4 1b       	sub	r26, r20
 5aa:	83 95       	inc	r24
 5ac:	50 51       	subi	r21, 0x10	; 16
 5ae:	b9 f7       	brne	.-18     	; 0x59e <__utoa_common+0x6>
 5b0:	a0 5d       	subi	r26, 0xD0	; 208
 5b2:	aa 33       	cpi	r26, 0x3A	; 58
 5b4:	08 f0       	brcs	.+2      	; 0x5b8 <__utoa_common+0x20>
 5b6:	a9 5d       	subi	r26, 0xD9	; 217
 5b8:	a1 93       	st	Z+, r26
 5ba:	00 97       	sbiw	r24, 0x00	; 0
 5bc:	79 f7       	brne	.-34     	; 0x59c <__utoa_common+0x4>
 5be:	b1 11       	cpse	r27, r1
 5c0:	b1 93       	st	Z+, r27
 5c2:	11 92       	st	Z+, r1
 5c4:	cb 01       	movw	r24, r22
 5c6:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <strrev>

000005ca <strrev>:
 5ca:	dc 01       	movw	r26, r24
 5cc:	fc 01       	movw	r30, r24
 5ce:	67 2f       	mov	r22, r23
 5d0:	71 91       	ld	r23, Z+
 5d2:	77 23       	and	r23, r23
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <strrev+0x4>
 5d6:	32 97       	sbiw	r30, 0x02	; 2
 5d8:	04 c0       	rjmp	.+8      	; 0x5e2 <strrev+0x18>
 5da:	7c 91       	ld	r23, X
 5dc:	6d 93       	st	X+, r22
 5de:	70 83       	st	Z, r23
 5e0:	62 91       	ld	r22, -Z
 5e2:	ae 17       	cp	r26, r30
 5e4:	bf 07       	cpc	r27, r31
 5e6:	c8 f3       	brcs	.-14     	; 0x5da <strrev+0x10>
 5e8:	08 95       	ret

000005ea <_exit>:
 5ea:	f8 94       	cli

000005ec <__stop_program>:
 5ec:	ff cf       	rjmp	.-2      	; 0x5ec <__stop_program>
