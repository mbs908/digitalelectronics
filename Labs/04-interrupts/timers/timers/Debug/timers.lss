
timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000240  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a8c  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000705  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c2  00000000  00000000  0000152d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000018f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042a  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017d  00000000  00000000  00001e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001f97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 89 00 	call	0x112	; 0x112 <main>
  88:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIO_config_output>:
}

/*--------------------------------------------------------------------*/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <GPIO_config_output+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GPIO_config_output+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <GPIO_config_input_pullup>:
  a8:	fc 01       	movw	r30, r24
  aa:	80 81       	ld	r24, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <GPIO_config_input_pullup+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <GPIO_config_input_pullup+0xa>
  ba:	92 2f       	mov	r25, r18
  bc:	90 95       	com	r25
  be:	89 23       	and	r24, r25
  c0:	80 83       	st	Z, r24
  c2:	80 81       	ld	r24, Z
  c4:	81 81       	ldd	r24, Z+1	; 0x01
  c6:	28 2b       	or	r18, r24
  c8:	21 83       	std	Z+1, r18	; 0x01
  ca:	08 95       	ret

000000cc <GPIO_write_low>:
  cc:	fc 01       	movw	r30, r24
  ce:	90 81       	ld	r25, Z
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <GPIO_write_low+0xe>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <GPIO_write_low+0xa>
  de:	20 95       	com	r18
  e0:	29 23       	and	r18, r25
  e2:	20 83       	st	Z, r18
  e4:	08 95       	ret

000000e6 <GPIO_write_high>:
  e6:	fc 01       	movw	r30, r24
  e8:	40 81       	ld	r20, Z
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <GPIO_write_high+0xe>
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <GPIO_write_high+0xa>
  f8:	24 2b       	or	r18, r20
  fa:	20 83       	st	Z, r18
  fc:	08 95       	ret

000000fe <GPIO_read>:
/* GPIO_read HOMEWORK */
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	  uint8_t input;
	  
	  if(bit_is_set(*reg_name , pin_num)) //This will return a 0 if the bit is clear, and non-zero if the bit is set.
  fe:	fc 01       	movw	r30, r24
 100:	80 81       	ld	r24, Z
	else 
	  {
		  input=0;
	  }
	  
	  return(input);
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <GPIO_read+0xc>
 106:	95 95       	asr	r25
 108:	87 95       	ror	r24
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <GPIO_read+0x8>
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	08 95       	ret

00000112 <main>:

uint8_t mkr;//marker
int main(void)
{
    /* Configuration of LEDs */
     GPIO_config_output(&DDRC, LED_D1);
 112:	65 e0       	ldi	r22, 0x05	; 5
 114:	87 e2       	ldi	r24, 0x27	; 39
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
     GPIO_write_high(&PORTC, LED_D1);
 11c:	65 e0       	ldi	r22, 0x05	; 5
 11e:	88 e2       	ldi	r24, 0x28	; 40
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 73 00 	call	0xe6	; 0xe6 <GPIO_write_high>
    
	 GPIO_config_output(&DDRC, LED_D2);
 126:	64 e0       	ldi	r22, 0x04	; 4
 128:	87 e2       	ldi	r24, 0x27	; 39
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
	 GPIO_write_low(&PORTC, LED_D2);
 130:	64 e0       	ldi	r22, 0x04	; 4
 132:	88 e2       	ldi	r24, 0x28	; 40
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	 
	 GPIO_config_output(&DDRC, LED_D3);
 13a:	63 e0       	ldi	r22, 0x03	; 3
 13c:	87 e2       	ldi	r24, 0x27	; 39
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
	 GPIO_write_low(&PORTC, LED_D3);
 144:	63 e0       	ldi	r22, 0x03	; 3
 146:	88 e2       	ldi	r24, 0x28	; 40
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	  
	 GPIO_config_output(&DDRC, LED_D4);
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	87 e2       	ldi	r24, 0x27	; 39
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
	 GPIO_write_low(&PORTC, LED_D4);
 158:	62 e0       	ldi	r22, 0x02	; 2
 15a:	88 e2       	ldi	r24, 0x28	; 40
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
	   
	 GPIO_config_output(&DDRC, LED_D5);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	87 e2       	ldi	r24, 0x27	; 39
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
	 GPIO_write_low(&PORTC, LED_D5);
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	88 e2       	ldi	r24, 0x28	; 40
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_write_low>
		
     GPIO_config_input_pullup( &DDRD, BTN);
 176:	64 e0       	ldi	r22, 0x04	; 4
 178:	8a e2       	ldi	r24, 0x2A	; 42
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_config_input_pullup>

    /* Configuration of 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
    TIM1_overflow_1s();
 180:	e1 e8       	ldi	r30, 0x81	; 129
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	8c 7f       	andi	r24, 0xFC	; 252
 188:	80 83       	st	Z, r24
 18a:	80 81       	ld	r24, Z
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 190:	ef e6       	ldi	r30, 0x6F	; 111
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	81 60       	ori	r24, 0x01	; 1
 198:	80 83       	st	Z, r24

 
    // Enables interrupts by setting the global interrupt mask
    sei();
 19a:	78 94       	sei
 19c:	ff cf       	rjmp	.-2      	; 0x19c <main+0x8a>

0000019e <__vector_13>:

/* Interrupt service routines ----------------------------------------*/
/**
 * ISR starts when Timer/Counter1 overflows. */
ISR(TIMER1_OVF_vect)
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
   
	mkr++;
 1c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	PORTC=(PORTC>>1);
 1ca:	88 b1       	in	r24, 0x08	; 8
 1cc:	86 95       	lsr	r24
 1ce:	88 b9       	out	0x08, r24	; 8
	if(mkr==5)
 1d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1d4:	85 30       	cpi	r24, 0x05	; 5
 1d6:	21 f4       	brne	.+8      	; 0x1e0 <__vector_13+0x42>
	{
		mkr=0;
 1d8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		PORTC=32;
 1dc:	80 e2       	ldi	r24, 0x20	; 32
 1de:	88 b9       	out	0x08, r24	; 8
	}
	
	GPIO_read(&PIND,BTN);
 1e0:	64 e0       	ldi	r22, 0x04	; 4
 1e2:	89 e2       	ldi	r24, 0x29	; 41
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_read>
	if(GPIO_read(&PIND,BTN)==0)
 1ea:	64 e0       	ldi	r22, 0x04	; 4
 1ec:	89 e2       	ldi	r24, 0x29	; 41
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 7f 00 	call	0xfe	; 0xfe <GPIO_read>
 1f4:	81 11       	cpse	r24, r1
 1f6:	09 c0       	rjmp	.+18     	; 0x20a <__vector_13+0x6c>
	{
		TIM1_overflow_262ms();
 1f8:	e1 e8       	ldi	r30, 0x81	; 129
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	8b 7f       	andi	r24, 0xFB	; 251
 200:	80 83       	st	Z, r24
 202:	80 81       	ld	r24, Z
 204:	83 60       	ori	r24, 0x03	; 3
 206:	80 83       	st	Z, r24
 208:	08 c0       	rjmp	.+16     	; 0x21a <__vector_13+0x7c>
	}
	else
	{
		TIM1_overflow_1s();
 20a:	e1 e8       	ldi	r30, 0x81	; 129
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	8c 7f       	andi	r24, 0xFC	; 252
 212:	80 83       	st	Z, r24
 214:	80 81       	ld	r24, Z
 216:	84 60       	ori	r24, 0x04	; 4
 218:	80 83       	st	Z, r24
	}
		
	
}
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	bf 91       	pop	r27
 220:	af 91       	pop	r26
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	7f 91       	pop	r23
 228:	6f 91       	pop	r22
 22a:	5f 91       	pop	r21
 22c:	4f 91       	pop	r20
 22e:	3f 91       	pop	r19
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
