
segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002e4  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010e  0080010e  00000386  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dea  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000887  00000000  00000000  0000128a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ef  00000000  00000000  00001b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ef  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000428  00000000  00000000  00002753  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002b7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
	*reg_name++;                    // Change pointer to Data Register  CHANGE WHERE LOCATION IS POINTED
	*reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
	*reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
uint8_t dec=0;
 
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 ed 00 	call	0x1da	; 0x1da <SEG_init>

    SEG_update_shift_regs(unit, 0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <unit>
  fa:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SEG_update_shift_regs>

	/* Configure 8-bit Timer/Counter0
     * Set prescaler and enable overflow interrupt */
	TIM0_overflow_4ms();
  fe:	85 b5       	in	r24, 0x25	; 37
 100:	8c 7f       	andi	r24, 0xFC	; 252
 102:	85 bd       	out	0x25, r24	; 37
 104:	85 b5       	in	r24, 0x25	; 37
 106:	84 60       	ori	r24, 0x04	; 4
 108:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 10a:	ee e6       	ldi	r30, 0x6E	; 110
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	81 60       	ori	r24, 0x01	; 1
 112:	80 83       	st	Z, r24
	
    /* Configure 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
	     
	TIM1_overflow_1s();
 114:	e1 e8       	ldi	r30, 0x81	; 129
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8c 7f       	andi	r24, 0xFC	; 252
 11c:	80 83       	st	Z, r24
 11e:	80 81       	ld	r24, Z
 120:	84 60       	ori	r24, 0x04	; 4
 122:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 124:	ef e6       	ldi	r30, 0x6F	; 111
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24
		 	 
    // Enables interrupts by setting the global interrupt mask
    sei();
 12e:	78 94       	sei
 130:	ff cf       	rjmp	.-2      	; 0x130 <main+0x40>

00000132 <__vector_13>:
    // Will never reach this
    return 0;
}

ISR(TIMER1_OVF_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
	unit++;
 13e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <unit>
 142:	8f 5f       	subi	r24, 0xFF	; 255

	 if(unit>=10)
 144:	8a 30       	cpi	r24, 0x0A	; 10
 146:	18 f4       	brcc	.+6      	; 0x14e <__vector_13+0x1c>
    return 0;
}

ISR(TIMER1_OVF_vect)
{
	unit++;
 148:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <unit>
 14c:	0c c0       	rjmp	.+24     	; 0x166 <__vector_13+0x34>

	 if(unit>=10)
	 {
		unit=0;
 14e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <unit>
	    dec++;
 152:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dec>
 156:	8f 5f       	subi	r24, 0xFF	; 255
				
				if(dec>=6)
 158:	86 30       	cpi	r24, 0x06	; 6
 15a:	18 f4       	brcc	.+6      	; 0x162 <__vector_13+0x30>
	unit++;

	 if(unit>=10)
	 {
		unit=0;
	    dec++;
 15c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dec>
 160:	02 c0       	rjmp	.+4      	; 0x166 <__vector_13+0x34>
				
				if(dec>=6)
				{
					unit=0;
					dec=0;
 162:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <dec>
				}
				
	 }
}
 166:	8f 91       	pop	r24
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <__vector_16>:
		 
ISR(TIMER0_OVF_vect)
{		 
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	4f 93       	push	r20
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
	 static uint8_t pos=0;
	 if(pos==0)
 194:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end>
 198:	61 11       	cpse	r22, r1
 19a:	08 c0       	rjmp	.+16     	; 0x1ac <__vector_16+0x3a>
	 {
		 SEG_update_shift_regs(unit,pos);
 19c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <unit>
 1a0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SEG_update_shift_regs>
		 pos=1;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <__vector_16+0x46>
	 }
	 else
	 {
		 SEG_update_shift_regs(dec,pos);
 1ac:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dec>
 1b0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SEG_update_shift_regs>
		 pos=0;
 1b4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	 }
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <SEG_init>:

/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 1da:	64 e0       	ldi	r22, 0x04	; 4
 1dc:	8a e2       	ldi	r24, 0x2A	; 42
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 1e4:	67 e0       	ldi	r22, 0x07	; 7
 1e6:	8a e2       	ldi	r24, 0x2A	; 42
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	84 e2       	ldi	r24, 0x24	; 36
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 1f8:	08 95       	ret

000001fa <SEG_update_shift_regs>:
}

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
    uint8_t bit_number;
	
	segments = segment_value[segments];     // 0, 1, ..., 9
 200:	e8 2f       	mov	r30, r24
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	ec 5f       	subi	r30, 0xFC	; 252
 206:	fe 4f       	sbci	r31, 0xFE	; 254
 208:	10 81       	ld	r17, Z
	position = segment_position[position];
 20a:	e6 2f       	mov	r30, r22
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	e0 50       	subi	r30, 0x00	; 0
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	d0 81       	ld	r29, Z
    
    // Pull LATCH, CLK, and DATA low
     GPIO_write_low(&PORTB,SEGMENT_DATA); //DATA 
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	85 e2       	ldi	r24, 0x25	; 37
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	 GPIO_write_low(&PORTD,SEGMENT_LATCH); //LATCH
 21e:	64 e0       	ldi	r22, 0x04	; 4
 220:	8b e2       	ldi	r24, 0x2B	; 43
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	 GPIO_write_low(&PORTD,SEGMENT_CLK); // CLOCK
 228:	67 e0       	ldi	r22, 0x07	; 7
 22a:	8b e2       	ldi	r24, 0x2B	; 43
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	85 e0       	ldi	r24, 0x05	; 5
 234:	8a 95       	dec	r24
 236:	f1 f7       	brne	.-4      	; 0x234 <SEG_update_shift_regs+0x3a>
 238:	00 00       	nop
 23a:	c8 e0       	ldi	r28, 0x08	; 8
    // Wait 1 us
     _delay_us(1);
    
    for (bit_number = 0; bit_number < 8; bit_number++)
    {		
		 if((segments % 2)==0)
 23c:	10 fd       	sbrc	r17, 0
 23e:	06 c0       	rjmp	.+12     	; 0x24c <SEG_update_shift_regs+0x52>
		 {
			 GPIO_write_low(&PORTB,SEGMENT_DATA);
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	85 e2       	ldi	r24, 0x25	; 37
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 24a:	05 c0       	rjmp	.+10     	; 0x256 <SEG_update_shift_regs+0x5c>
			 
		 }
		 else
		 {
			 GPIO_write_high(&PORTB,SEGMENT_DATA);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	85 e2       	ldi	r24, 0x25	; 37
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	8a 95       	dec	r24
 25a:	f1 f7       	brne	.-4      	; 0x258 <SEG_update_shift_regs+0x5e>
 25c:	00 00       	nop
		 }
		 
        // Wait 1 us
         _delay_us(1);
        // Pull CLK high
         GPIO_write_high(&PORTD,SEGMENT_CLK);
 25e:	67 e0       	ldi	r22, 0x07	; 7
 260:	8b e2       	ldi	r24, 0x2B	; 43
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 268:	85 e0       	ldi	r24, 0x05	; 5
 26a:	8a 95       	dec	r24
 26c:	f1 f7       	brne	.-4      	; 0x26a <SEG_update_shift_regs+0x70>
 26e:	00 00       	nop
        // Wait 1 us
         _delay_us(1);
        // Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 270:	67 e0       	ldi	r22, 0x07	; 7
 272:	8b e2       	ldi	r24, 0x2B	; 43
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>

        // Shift "segments"
        segments = segments >> 1;//to the right
 27a:	16 95       	lsr	r17
 27c:	c1 50       	subi	r28, 0x01	; 1
	 GPIO_write_low(&PORTD,SEGMENT_CLK); // CLOCK
	 
    // Wait 1 us
     _delay_us(1);
    
    for (bit_number = 0; bit_number < 8; bit_number++)
 27e:	f1 f6       	brne	.-68     	; 0x23c <SEG_update_shift_regs+0x42>
 280:	c8 e0       	ldi	r28, 0x08	; 8

    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "position")
		
		if((position % 2)==0)
 282:	d0 fd       	sbrc	r29, 0
 284:	06 c0       	rjmp	.+12     	; 0x292 <SEG_update_shift_regs+0x98>
		{
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	85 e2       	ldi	r24, 0x25	; 37
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 290:	05 c0       	rjmp	.+10     	; 0x29c <SEG_update_shift_regs+0xa2>
			
		}
		else
		{
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	85 e2       	ldi	r24, 0x25	; 37
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 29c:	85 e0       	ldi	r24, 0x05	; 5
 29e:	8a 95       	dec	r24
 2a0:	f1 f7       	brne	.-4      	; 0x29e <SEG_update_shift_regs+0xa4>
 2a2:	00 00       	nop
		}
		
		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTD,SEGMENT_CLK);
 2a4:	67 e0       	ldi	r22, 0x07	; 7
 2a6:	8b e2       	ldi	r24, 0x2B	; 43
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2ae:	85 e0       	ldi	r24, 0x05	; 5
 2b0:	8a 95       	dec	r24
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <SEG_update_shift_regs+0xb6>
 2b4:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD,SEGMENT_CLK);
 2b6:	67 e0       	ldi	r22, 0x07	; 7
 2b8:	8b e2       	ldi	r24, 0x2B	; 43
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		position = position >> 1;//to the right
 2c0:	d6 95       	lsr	r29
 2c2:	c1 50       	subi	r28, 0x01	; 1

        // Shift "segments"
        segments = segments >> 1;//to the right
    }

    for (bit_number = 0; bit_number < 8; bit_number++)
 2c4:	f1 f6       	brne	.-68     	; 0x282 <SEG_update_shift_regs+0x88>
		position = position >> 1;//to the right
  
    }

    // Pull LATCH high
	 GPIO_write_high(&PORTD,SEGMENT_LATCH);
 2c6:	64 e0       	ldi	r22, 0x04	; 4
 2c8:	8b e2       	ldi	r24, 0x2B	; 43
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2d0:	85 e0       	ldi	r24, 0x05	; 5
 2d2:	8a 95       	dec	r24
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <SEG_update_shift_regs+0xd8>
 2d6:	00 00       	nop

    // Wait 1 us
     _delay_us(1);
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
