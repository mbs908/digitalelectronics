
lcd_custom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000562  000005f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000562  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800136  00800136  0000062c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ca  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099c  00000000  00000000  00001b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000920  00000000  00000000  000024b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00002dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000522  00000000  00000000  00002fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000956  00000000  00000000  0000350e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003e64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e3       	ldi	r26, 0x36	; 54
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 33       	cpi	r26, 0x3D	; 61
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  9e:	0c 94 af 02 	jmp	0x55e	; 0x55e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	00 00       	nop
  aa:	29 98       	cbi	0x05, 1	; 5
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	54 9a       	sbi	0x0a, 4	; 10
  be:	55 9a       	sbi	0x0a, 5	; 10
  c0:	56 9a       	sbi	0x0a, 6	; 10
  c2:	57 9a       	sbi	0x0a, 7	; 10
  c4:	5f 98       	cbi	0x0b, 7	; 11
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 98       	cbi	0x0b, 5	; 11
  ca:	5c 98       	cbi	0x0b, 4	; 11
  cc:	cc 23       	and	r28, r28
  ce:	0c f4       	brge	.+2      	; 0xd2 <lcd_write+0x24>
  d0:	5f 9a       	sbi	0x0b, 7	; 11
  d2:	c6 fd       	sbrc	r28, 6
  d4:	5e 9a       	sbi	0x0b, 6	; 11
  d6:	c5 fd       	sbrc	r28, 5
  d8:	5d 9a       	sbi	0x0b, 5	; 11
  da:	c4 fd       	sbrc	r28, 4
  dc:	5c 9a       	sbi	0x0b, 4	; 11
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e2:	5f 98       	cbi	0x0b, 7	; 11
  e4:	5e 98       	cbi	0x0b, 6	; 11
  e6:	5d 98       	cbi	0x0b, 5	; 11
  e8:	5c 98       	cbi	0x0b, 4	; 11
  ea:	c3 fd       	sbrc	r28, 3
  ec:	5f 9a       	sbi	0x0b, 7	; 11
  ee:	c2 fd       	sbrc	r28, 2
  f0:	5e 9a       	sbi	0x0b, 6	; 11
  f2:	c1 fd       	sbrc	r28, 1
  f4:	5d 9a       	sbi	0x0b, 5	; 11
  f6:	c0 fd       	sbrc	r28, 0
  f8:	5c 9a       	sbi	0x0b, 4	; 11
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	5d 9a       	sbi	0x0b, 5	; 11
 102:	5e 9a       	sbi	0x0b, 6	; 11
 104:	5f 9a       	sbi	0x0b, 7	; 11
 106:	8a ef       	ldi	r24, 0xFA	; 250
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_write+0x5a>
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_command>:
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 116:	08 95       	ret

00000118 <lcd_data>:
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 11e:	08 95       	ret

00000120 <lcd_gotoxy>:
 120:	61 11       	cpse	r22, r1
 122:	04 c0       	rjmp	.+8      	; 0x12c <lcd_gotoxy+0xc>
 124:	80 58       	subi	r24, 0x80	; 128
 126:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 12a:	08 95       	ret
 12c:	80 54       	subi	r24, 0x40	; 64
 12e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 132:	08 95       	ret

00000134 <lcd_clrscr>:
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 13a:	08 95       	ret

0000013c <lcd_putc>:
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 142:	08 95       	ret

00000144 <lcd_puts>:
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
 14a:	21 96       	adiw	r28, 0x01	; 1
 14c:	fc 01       	movw	r30, r24
 14e:	80 81       	ld	r24, Z
 150:	88 23       	and	r24, r24
 152:	29 f0       	breq	.+10     	; 0x15e <lcd_puts+0x1a>
 154:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
 158:	89 91       	ld	r24, Y+
 15a:	81 11       	cpse	r24, r1
 15c:	fb cf       	rjmp	.-10     	; 0x154 <lcd_puts+0x10>
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 168:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 16a:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 16c:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 16e:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 170:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 172:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 174:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f e9       	ldi	r24, 0x9F	; 159
 178:	9f e0       	ldi	r25, 0x0F	; 15
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_init+0x16>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_init+0x1c>
 180:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 182:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 184:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 186:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 18a:	81 ee       	ldi	r24, 0xE1	; 225
 18c:	94 e0       	ldi	r25, 0x04	; 4
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_init+0x2a>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_init+0x30>
 194:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 196:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19a:	95 e1       	ldi	r25, 0x15	; 21
 19c:	9a 95       	dec	r25
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_init+0x38>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	85 e1       	ldi	r24, 0x15	; 21
 1a8:	8a 95       	dec	r24
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_init+0x44>
 1ac:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1ae:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1b0:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b4:	95 e1       	ldi	r25, 0x15	; 21
 1b6:	9a 95       	dec	r25
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x52>
 1ba:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1bc:	88 e2       	ldi	r24, 0x28	; 40
 1be:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1c2:	88 e0       	ldi	r24, 0x08	; 8
 1c4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1c8:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1d2:	8c 2f       	mov	r24, r28
 1d4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <main>:
 * Main function where the program execution begins. Update stopwatch
 * value on LCD display when 8-bit Timer/Counter2 overflows.
 */

int main(void)
{	// Custom character definition using https://omerk.github.io/lcdchargen/
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	e0 97       	sbiw	r28, 0x30	; 48
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
	uint8_t customChar[48] = {
 1f0:	80 e3       	ldi	r24, 0x30	; 48
 1f2:	e0 e0       	ldi	r30, 0x00	; 0
 1f4:	f1 e0       	ldi	r31, 0x01	; 1
 1f6:	de 01       	movw	r26, r28
 1f8:	11 96       	adiw	r26, 0x01	; 1
 1fa:	01 90       	ld	r0, Z+
 1fc:	0d 92       	st	X+, r0
 1fe:	8a 95       	dec	r24
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0x1e>
		0b11110, 0b11110, 0b11110, 0b11110, 0b11110, 0b11110, 0b11110, 0b11110,
		0b11111, 0b11111, 0b11111, 0b11111, 0b11111, 0b11111, 0b11111, 0b11111
		};
		
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 202:	8c e0       	ldi	r24, 0x0C	; 12
 204:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_init>
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 208:	80 e4       	ldi	r24, 0x40	; 64
 20a:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 20e:	8e 01       	movw	r16, r28
 210:	0f 5f       	subi	r16, 0xFF	; 255
 212:	1f 4f       	sbci	r17, 0xFF	; 255
 214:	7e 01       	movw	r14, r28
 216:	81 e3       	ldi	r24, 0x31	; 49
 218:	e8 0e       	add	r14, r24
 21a:	f1 1c       	adc	r15, r1
	for (uint8_t i = 0; i < 48; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 21c:	f8 01       	movw	r30, r16
 21e:	81 91       	ld	r24, Z+
 220:	8f 01       	movw	r16, r30
 222:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_data>
		
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 48; i++)
 226:	0e 15       	cp	r16, r14
 228:	1f 05       	cpc	r17, r15
 22a:	c1 f7       	brne	.-16     	; 0x21c <main+0x40>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 22c:	80 e8       	ldi	r24, 0x80	; 128
 22e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    // Configure 8-bit Timer/Counter0 for progress bar
    // Set prescaler and enable overflow interrupt every 16 ms
	
	TIM0_overflow_interrupt_enable();
 232:	ee e6       	ldi	r30, 0x6E	; 110
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	81 60       	ori	r24, 0x01	; 1
 23a:	80 83       	st	Z, r24
	TIM0_overflow_16ms();
 23c:	85 b5       	in	r24, 0x25	; 37
 23e:	8d 7f       	andi	r24, 0xFD	; 253
 240:	85 bd       	out	0x25, r24	; 37
 242:	85 b5       	in	r24, 0x25	; 37
 244:	85 60       	ori	r24, 0x05	; 5
 246:	85 bd       	out	0x25, r24	; 37
	
	//Configure timer 2 for stopwatch
	TIM2_overflow_interrupt_enable();
 248:	e0 e7       	ldi	r30, 0x70	; 112
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	81 60       	ori	r24, 0x01	; 1
 250:	80 83       	st	Z, r24
	TIM2_overflow_16ms();
 252:	e1 eb       	ldi	r30, 0xB1	; 177
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	87 60       	ori	r24, 0x07	; 7
 25a:	80 83       	st	Z, r24


    // Enables interrupts by setting the global interrupt mask
    sei();
 25c:	78 94       	sei
 25e:	ff cf       	rjmp	.-2      	; 0x25e <main+0x82>

00000260 <__vector_16>:
/**
 * ISR starts when Timer/Counter0 overflows. Update the progress bar on
 * LCD display every 16 ms.
 */
ISR(TIMER0_OVF_vect)
{
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	2f 93       	push	r18
 26c:	3f 93       	push	r19
 26e:	4f 93       	push	r20
 270:	5f 93       	push	r21
 272:	6f 93       	push	r22
 274:	7f 93       	push	r23
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
 27a:	af 93       	push	r26
 27c:	bf 93       	push	r27
 27e:	cf 93       	push	r28
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
    static uint8_t symbol = 0;
    static uint8_t position = 0;
	static uint8_t number_of_overflows = 0;

    lcd_gotoxy(1 + position, 1);
 284:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <position.1952>
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
    lcd_putc(symbol);
 290:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <symbol.1951>
 294:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
	if(symbol<5){
 298:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <symbol.1951>
 29c:	85 30       	cpi	r24, 0x05	; 5
 29e:	20 f4       	brcc	.+8      	; 0x2a8 <__vector_16+0x48>
		symbol++;
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <symbol.1951>
 2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <__vector_16+0x56>
		
	}
	else{
		position++;
 2a8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <position.1952>
 2ac:	8f 5f       	subi	r24, 0xFF	; 255
 2ae:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <position.1952>
		symbol=0;
 2b2:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <symbol.1951>
	}
	if(number_of_overflows==59){//60 iterations is 1 second
 2b6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <number_of_overflows.1953>
 2ba:	8b 33       	cpi	r24, 0x3B	; 59
 2bc:	79 f4       	brne	.+30     	; 0x2dc <__vector_16+0x7c>
		position=0;
 2be:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <position.1952>
		number_of_overflows=0;
 2c2:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <number_of_overflows.1953>
		for(uint8_t i=0;i<12;i++){
 2c6:	c0 e0       	ldi	r28, 0x00	; 0
			lcd_gotoxy(1+i,1);
 2c8:	cf 5f       	subi	r28, 0xFF	; 255
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	8c 2f       	mov	r24, r28
 2ce:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_putc(0);
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
		symbol=0;
	}
	if(number_of_overflows==59){//60 iterations is 1 second
		position=0;
		number_of_overflows=0;
		for(uint8_t i=0;i<12;i++){
 2d8:	cc 30       	cpi	r28, 0x0C	; 12
 2da:	b1 f7       	brne	.-20     	; 0x2c8 <__vector_16+0x68>
			lcd_gotoxy(1+i,1);
			lcd_putc(0);
		}
	}
	number_of_overflows++;
 2dc:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <number_of_overflows.1953>
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <number_of_overflows.1953>
	
}
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	cf 91       	pop	r28
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	ef 92       	push	r14
 316:	ff 92       	push	r15
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	00 d0       	rcall	.+0      	; 0x33a <__vector_9+0x30>
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
    static uint8_t number_of_overflows = 0;
    static uint8_t tens = 0;        // Tenths of a second
    static uint8_t secs = 0;        // Seconds
	static uint8_t mins = 0;		//Minutes
	uint16_t square=0;				//Square value of seconds
    char lcd_string[2] = "  ";      // String for converting numbers by itoa()
 33e:	80 e2       	ldi	r24, 0x20	; 32
 340:	90 e2       	ldi	r25, 0x20	; 32
 342:	9a 83       	std	Y+2, r25	; 0x02
 344:	89 83       	std	Y+1, r24	; 0x01

    number_of_overflows++;
 346:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <number_of_overflows.1963>
 34a:	8f 5f       	subi	r24, 0xFF	; 255
    if (number_of_overflows >= 6)
 34c:	86 30       	cpi	r24, 0x06	; 6
 34e:	18 f4       	brcc	.+6      	; 0x356 <__vector_9+0x4c>
    static uint8_t secs = 0;        // Seconds
	static uint8_t mins = 0;		//Minutes
	uint16_t square=0;				//Square value of seconds
    char lcd_string[2] = "  ";      // String for converting numbers by itoa()

    number_of_overflows++;
 350:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <number_of_overflows.1963>
 354:	b6 c0       	rjmp	.+364    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 356:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <number_of_overflows.1963>
		//Compute the tens, seconds and minutes
        tens++;
 35a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <tens.1964>
 35e:	8f 5f       	subi	r24, 0xFF	; 255
		if(tens>9){
 360:	8a 30       	cpi	r24, 0x0A	; 10
 362:	18 f4       	brcc	.+6      	; 0x36a <__vector_9+0x60>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
		//Compute the tens, seconds and minutes
        tens++;
 364:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <tens.1964>
 368:	07 c0       	rjmp	.+14     	; 0x378 <__vector_9+0x6e>
		if(tens>9){
			tens=0;
 36a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <tens.1964>
			secs++;
 36e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <secs.1965>
 372:	8f 5f       	subi	r24, 0xFF	; 255
 374:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <secs.1965>
		}
		if(secs>59){
 378:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <secs.1965>
 37c:	8c 33       	cpi	r24, 0x3C	; 60
 37e:	38 f0       	brcs	.+14     	; 0x38e <__vector_9+0x84>
			mins++;
 380:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 384:	8f 5f       	subi	r24, 0xFF	; 255
 386:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
			secs=0;
 38a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <secs.1965>
		}
		if(mins>59){
 38e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 392:	8c 33       	cpi	r24, 0x3C	; 60
 394:	10 f0       	brcs	.+4      	; 0x39a <__vector_9+0x90>
			mins=0;
 396:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 39a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 39e:	4a e0       	ldi	r20, 0x0A	; 10
 3a0:	be 01       	movw	r22, r28
 3a2:	6f 5f       	subi	r22, 0xFF	; 255
 3a4:	7f 4f       	sbci	r23, 0xFF	; 255
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__itoa_ncheck>
		
		//Display the clock
		
		//Minutes
		itoa(mins, lcd_string, 10);
		if(mins<10){
 3ac:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 3b0:	8a 30       	cpi	r24, 0x0A	; 10
 3b2:	60 f4       	brcc	.+24     	; 0x3cc <__vector_9+0xc2>
			lcd_gotoxy(1, 0);
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_putc('0');
 3bc:	80 e3       	ldi	r24, 0x30	; 48
 3be:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
			lcd_gotoxy(2, 0);
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <__vector_9+0xca>
		}
		else{
			lcd_gotoxy(1, 0);
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
		}
		lcd_puts(lcd_string);
 3d4:	ce 01       	movw	r24, r28
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
		lcd_gotoxy(3, 0);
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	83 e0       	ldi	r24, 0x03	; 3
 3e0:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
		lcd_putc(':');
 3e4:	8a e3       	ldi	r24, 0x3A	; 58
 3e6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
 3ea:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <secs.1965>
 3ee:	4a e0       	ldi	r20, 0x0A	; 10
 3f0:	be 01       	movw	r22, r28
 3f2:	6f 5f       	subi	r22, 0xFF	; 255
 3f4:	7f 4f       	sbci	r23, 0xFF	; 255
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__itoa_ncheck>
		
		//Seconds
		itoa(secs, lcd_string, 10);     // Convert decimal value to string
		if(secs<10){
 3fc:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <secs.1965>
 400:	8a 30       	cpi	r24, 0x0A	; 10
 402:	60 f4       	brcc	.+24     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			lcd_gotoxy(4, 0);
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	84 e0       	ldi	r24, 0x04	; 4
 408:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_putc('0');
 40c:	80 e3       	ldi	r24, 0x30	; 48
 40e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
			lcd_gotoxy(5, 0);
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	85 e0       	ldi	r24, 0x05	; 5
 416:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
 41a:	04 c0       	rjmp	.+8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		}
		else{
			lcd_gotoxy(4, 0);
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	84 e0       	ldi	r24, 0x04	; 4
 420:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
		}
		lcd_puts(lcd_string);
 424:	ce 01       	movw	r24, r28
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
		lcd_putc('.');
 42c:	8e e2       	ldi	r24, 0x2E	; 46
 42e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
 432:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <tens.1964>
 436:	4a e0       	ldi	r20, 0x0A	; 10
 438:	be 01       	movw	r22, r28
 43a:	6f 5f       	subi	r22, 0xFF	; 255
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__itoa_ncheck>
		
		//Tens
		itoa(tens, lcd_string, 10);
		lcd_gotoxy(7, 0);
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	87 e0       	ldi	r24, 0x07	; 7
 448:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
		lcd_puts(lcd_string);
 44c:	ce 01       	movw	r24, r28
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
		
		//Compute and display the square of the seconds
		square=secs*secs;
 454:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <secs.1965>
 458:	88 9f       	mul	r24, r24
 45a:	70 01       	movw	r14, r0
 45c:	11 24       	eor	r1, r1
 45e:	87 01       	movw	r16, r14
		if(secs==0){
 460:	81 11       	cpse	r24, r1
 462:	08 c0       	rjmp	.+16     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
			lcd_gotoxy(11, 0);
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	8b e0       	ldi	r24, 0x0B	; 11
 468:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
			lcd_puts("0000");
 46c:	80 e3       	ldi	r24, 0x30	; 48
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
 474:	4a e0       	ldi	r20, 0x0A	; 10
 476:	be 01       	movw	r22, r28
 478:	6f 5f       	subi	r22, 0xFF	; 255
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	c7 01       	movw	r24, r14
 47e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__itoa_ncheck>
		}
		
		itoa(square, lcd_string, 10);
		if(square<10){
 482:	0a 30       	cpi	r16, 0x0A	; 10
 484:	11 05       	cpc	r17, r1
 486:	28 f4       	brcc	.+10     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			lcd_gotoxy(14, 0);
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	8e e0       	ldi	r24, 0x0E	; 14
 48c:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
 490:	14 c0       	rjmp	.+40     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		}
		else if(square<100){
 492:	04 36       	cpi	r16, 0x64	; 100
 494:	11 05       	cpc	r17, r1
 496:	28 f4       	brcc	.+10     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			lcd_gotoxy(13, 0);
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	8d e0       	ldi	r24, 0x0D	; 13
 49c:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
 4a0:	0c c0       	rjmp	.+24     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		}
		else if(square<1000){
 4a2:	08 3e       	cpi	r16, 0xE8	; 232
 4a4:	13 40       	sbci	r17, 0x03	; 3
 4a6:	28 f4       	brcc	.+10     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
			lcd_gotoxy(12, 0);
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	8c e0       	ldi	r24, 0x0C	; 12
 4ac:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
 4b0:	04 c0       	rjmp	.+8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		}
		else{
			lcd_gotoxy(11, 0);
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	8b e0       	ldi	r24, 0x0B	; 11
 4b6:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
		}
		
		lcd_puts(lcd_string);
 4ba:	ce 01       	movw	r24, r28
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
    }
}
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	ff 91       	pop	r31
 4cc:	ef 91       	pop	r30
 4ce:	bf 91       	pop	r27
 4d0:	af 91       	pop	r26
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	7f 91       	pop	r23
 4d8:	6f 91       	pop	r22
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	1f 91       	pop	r17
 4e4:	0f 91       	pop	r16
 4e6:	ff 90       	pop	r15
 4e8:	ef 90       	pop	r14
 4ea:	0f 90       	pop	r0
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <__itoa_ncheck>:
 4f4:	bb 27       	eor	r27, r27
 4f6:	4a 30       	cpi	r20, 0x0A	; 10
 4f8:	31 f4       	brne	.+12     	; 0x506 <__itoa_ncheck+0x12>
 4fa:	99 23       	and	r25, r25
 4fc:	22 f4       	brpl	.+8      	; 0x506 <__itoa_ncheck+0x12>
 4fe:	bd e2       	ldi	r27, 0x2D	; 45
 500:	90 95       	com	r25
 502:	81 95       	neg	r24
 504:	9f 4f       	sbci	r25, 0xFF	; 255
 506:	0c 94 86 02 	jmp	0x50c	; 0x50c <__utoa_common>

0000050a <__utoa_ncheck>:
 50a:	bb 27       	eor	r27, r27

0000050c <__utoa_common>:
 50c:	fb 01       	movw	r30, r22
 50e:	55 27       	eor	r21, r21
 510:	aa 27       	eor	r26, r26
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	aa 1f       	adc	r26, r26
 518:	a4 17       	cp	r26, r20
 51a:	10 f0       	brcs	.+4      	; 0x520 <__utoa_common+0x14>
 51c:	a4 1b       	sub	r26, r20
 51e:	83 95       	inc	r24
 520:	50 51       	subi	r21, 0x10	; 16
 522:	b9 f7       	brne	.-18     	; 0x512 <__utoa_common+0x6>
 524:	a0 5d       	subi	r26, 0xD0	; 208
 526:	aa 33       	cpi	r26, 0x3A	; 58
 528:	08 f0       	brcs	.+2      	; 0x52c <__utoa_common+0x20>
 52a:	a9 5d       	subi	r26, 0xD9	; 217
 52c:	a1 93       	st	Z+, r26
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	79 f7       	brne	.-34     	; 0x510 <__utoa_common+0x4>
 532:	b1 11       	cpse	r27, r1
 534:	b1 93       	st	Z+, r27
 536:	11 92       	st	Z+, r1
 538:	cb 01       	movw	r24, r22
 53a:	0c 94 9f 02 	jmp	0x53e	; 0x53e <strrev>

0000053e <strrev>:
 53e:	dc 01       	movw	r26, r24
 540:	fc 01       	movw	r30, r24
 542:	67 2f       	mov	r22, r23
 544:	71 91       	ld	r23, Z+
 546:	77 23       	and	r23, r23
 548:	e1 f7       	brne	.-8      	; 0x542 <strrev+0x4>
 54a:	32 97       	sbiw	r30, 0x02	; 2
 54c:	04 c0       	rjmp	.+8      	; 0x556 <strrev+0x18>
 54e:	7c 91       	ld	r23, X
 550:	6d 93       	st	X+, r22
 552:	70 83       	st	Z, r23
 554:	62 91       	ld	r22, -Z
 556:	ae 17       	cp	r26, r30
 558:	bf 07       	cpc	r27, r31
 55a:	c8 f3       	brcs	.-14     	; 0x54e <strrev+0x10>
 55c:	08 95       	ret

0000055e <_exit>:
 55e:	f8 94       	cli

00000560 <__stop_program>:
 560:	ff cf       	rjmp	.-2      	; 0x560 <__stop_program>
